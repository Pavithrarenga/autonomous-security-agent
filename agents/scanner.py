from strands import Agent, tool
from strands_tools import file_read, file_write, code_interpreter, memory
from strands.models import BedrockModel
import json
import boto3
import os
import subprocess
import sys
from datetime import datetime

os.environ["BUCKET_NAME"] = "security-agent-results"

def upload_agent_results(session, bucket_name, agent_type, repo_name, results):
    """Upload agent results to S3 with structured key."""
    try:
        s3_client = session.client('s3')
        
        # Create a structured S3 key
        date_str = datetime.utcnow().strftime('%Y/%m/%d')
        timestamp = datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')
        s3_key = f"{agent_type}_results/{date_str}/{repo_name}_{timestamp}.md"
        document=f"""# {agent_type.title()} Agent Results
                **Date:** {datetime.utcnow().isoformat()} UTC
                **Repository**: {repo_name}
                **Agent:** {agent_type.title()} Agent
                ## Results
                {results}
                
                --- End of Report ---
                *Generated by Autonomous Security Agent (ASA)*
                """
                
        
        # Upload the results
        s3_client.put_object(
            Bucket=bucket_name,
            Key=s3_key,
            Body=document.encode('utf-8'),
            ContentType='text/markdown'
        )
        
        s3_url = f"s3://{bucket_name}/{s3_key}"
        print(f"{agent_type.title()} agent results uploaded to {s3_url}")
        return s3_url
    except Exception as e:
        print(f"Error uploading {agent_type} agent results to s3: {e}")
        return f"s3 upload failed: {str(e)}"          

def run_trivy_scan(repo_path: str) -> str:
    """
    Runs a Trivy vulnerability scan on the given repository path using subprocess.
    
    Args:
        repo_path (str): The local file or repository path to scan.
    
    Returns:
        str: The stdout (scan results) as plain text.
    
    Raises:
        subprocess.CalledProcessError: If the Trivy command fails.
    """
    try:
        # Run the trivy command and capture output
        result = subprocess.run(
            ["trivy", "fs", repo_path],  # 'fs' means file system scan
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        # Return stderr or raise for more control
        error_message = f"Trivy scan failed with error:\n{e.stderr}"
        return error_message


SCAN_ASSISTANT_SYSTEM_PROMPT = """
You are a security expert agent capable of identifying and explaining vulnerabilities in code. Your capabilities include:

1. Vulnerability Analysis:
   - Detect security issues.
   - Identify insecure coding patterns, improper input validation, and unsafe function usage.
   - Analyze third-party dependencies for known CVEs and insecure configurations.
   - Evaluate logic flaws and potential attack vectors.
   - Check package.json dependencies for known CVEs
   - Look up vulnerability databases for outdated packages
   - Identify specific version numbers with security issues

2. Secure Code Review:
   - Systematically review code to pinpoint security weaknesses.
   - Highlight insecure practices and suggest safer alternatives.
   - Explain why a particular code segment is vulnerable, with clear reasoning.
   - Assess code for compliance with secure coding standards (e.g., OWASP, CWE, SANS Top 25).
   
3. Educational Approach:
   - Explain findings clearly and systematically.
   - Use examples and analogies to help developers understand vulnerabilities.
   - Link security concepts to real-world incidents and impacts.

Focus on clarity and structured reasoning while ensuring the developer understands the underlying security issues.
"""


# Removed nested agent to fix tool formatting issues
    
def get_scanner_agent(session):
    # Specify the Bedrock ModelID
    # Create a Bedrock model instance with the session
    bedrock_model = BedrockModel(
        model_id="anthropic.claude-3-5-sonnet-20241022-v2:0",
        temperature=0.3,
        top_p=0.8,
        boto_session=session,
    )

    # Create the scanner agent with file reading capability
    return Agent(
        model=bedrock_model,
        system_prompt=SCAN_ASSISTANT_SYSTEM_PROMPT,
        tools=[file_read],
    )


def scanner_main(file_path):
    session = boto3.Session(region_name='ap-southeast-2')

    agent = get_scanner_agent(session)
    
    trivy_ouput = run_trivy_scan(file_path)
    response = agent(f"Analyze the application in the {file_path} directory for security vulnerabilities. Match the issues you find with corresponding CVES. Use the following output from trivy to validate and supplement your findings: {trivy_ouput}. Just provide a list of issues with explanation, don't provide details of your thinking process.")

    # print(type(response))
    # print("Printing Response Object")
    # print(response)
    # Upload results to S3
    bucket_name = 'security-agent-results'
    repo_name = os.path.basename(file_path)
    upload_result = upload_agent_results(session, bucket_name, "scanner", repo_name, str(response))
    print(f"s3 upload result: {upload_result}")
    return str(response)